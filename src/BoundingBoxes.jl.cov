        - module BoundingBoxes
        - 
        - export @boundingbox
        - 
        - macro boundingbox(ex)
        2     bound_name = ex.args[1]
        2     axes = ex.args[2:end]
        -     # construct Bounding Box type
        2     types = [Expr(:(::),symbol(axe*"_max"),:T) for axe in axes]
        2     append!(types,[Expr(:(::),symbol(axe*"_min"),:T) for axe in axes])
        2     curly = Expr(:curly, bound_name, Expr(:(<:), :T, :Number))
        2     bound = Expr(:type, true, curly, Expr(:block, types...))
        - 
        -     # construct equality
        2     eqs = [Expr(:call, :(==),
        -                  dots("a", "_max", axe),
        -                  dots("b", "_max", axe)) for axe in axes]
        2     append!(eqs, [Expr(:call, :(==),
        -                  dots("a", "_min", axe),
        -                  dots("b", "_min", axe)) for axe in axes])
        2     eq_return = Expr(:return, andlist(eqs))
        2     eq_block = Expr(:block, eq_return)
        2     eq_args = :(==(a::$(bound_name), b::$(bound_name)))
        2     equality = Expr(:function, eq_args, eq_block)
        - 
        -     # construct empty bounds
        2     empty_max = [Expr(:call, :typemin, :T) for i = 1:length(axes)]
        2     empty_min = [Expr(:call, :typemax, :T) for i = 1:length(axes)]
        2     empty_bounds = :($(bound_name)(T) = $(bound_name){T}($(empty_max...), $(empty_min...)))
        - 
        -     # promotion handling function
        2     promote_bounds = :($(bound_name)(x...) = $(bound_name)(promote(x...)...))
        - 
        -     # construct bounds updating
        2     update_args = :(update!(a::$(bound_name), b::AbstractArray))
        2     update_body = [Expr(:(=), dots("a", "_max", axes[i]),
        -                         Expr(:call,
        -                             :(max), dots("a", "_max", axes[i]),
        -                             Expr(:ref, :b, i))
        -                         ) for i = 1:length(axes)]
        2     append!(update_body, [Expr(:(=), dots("a", "_min", axes[i]),
        -                             Expr(:call,
        -                                     :(min), dots("a", "_min", axes[i]),
        -                                     Expr(:ref, :b, i))
        -                             ) for i = 1:length(axes)])
        2     update_block = Expr(:block, update_body..., :(return nothing))
        2     update_bounds = Expr(:function, update_args, update_block)
        - 
        -     # construct isinside (b isinside a)
        2     isinside_eqs = [Expr(:call, :(>),
        -                  dots("a", "_max", axe),
        -                  dots("b", "_max", axe)) for axe in axes]
        2     append!(isinside_eqs, [Expr(:call, :(<),
        -                  dots("a", "_min", axe),
        -                  dots("b", "_min", axe)) for axe in axes])
        2     isinside_return = Expr(:return, andlist(isinside_eqs))
        2     isinside_block = Expr(:block, isinside_return)
        2     isinside_args = :(isinside(a::$(bound_name), b::$(bound_name)))
        2     isinside_bounds = Expr(:function, isinside_args, isinside_block)
        - 
        - 
        2     quote
        -         $(esc(bound)) # create bounding box type
        -         $(esc(equality)) # create equality method (==)
        -         $(esc(promote_bounds)) # create arg promoting method
        -         $(esc(update_bounds)) # create method for updating against AbstractArray
        -         $(esc(isinside_bounds)) # create isinside method
        -         $(esc(empty_bounds)) # create empty bounds (Bounds(T))
        -     end
        - end
        - 
        - # member access
        - function dots(parent, elt, axe)
        -     return Expr(:(.), symbol(parent), QuoteNode(symbol(axe*elt)))
        - end
        - 
        - # create a list of chained "&&" Exprs
        - function andlist(exprs)
        4     last_expr = exprs[1]
        4     expr = Expr(:block)
        4     for i = 2:length(exprs)
       16         expr = Expr(:(&&), exprs[i], last_expr)
       16         last_expr = expr
        -     end
        4     return expr
        - end
        - 
        - end # module
        - 
